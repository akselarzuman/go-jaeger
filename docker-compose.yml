version: "3.8"
services:
  jaeger-collector:
    image: jaegertracing/jaeger-collector:1.55
    container_name: jaeger-collector
    restart: on-failure
    depends_on:
      - elasticsearch
    command: 
      - "--es.server-urls=http://elasticsearch:9200"
      # - "--sampling.initial-sampling-probability=.5"
      # - "--sampling.target-samples-per-second=.01"
    ports:
      - 14268:14268
      - 14269:14269 # health check
      - 4317:4317 # grpc
      - 4318:4318 # grpc
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - COLLECTOR_OTLP_ENABLED=true
  
  jaeger-query:
    image: jaegertracing/jaeger-query:1.55
    container_name: jaeger-query
    restart: on-failure
    command:
      - "--es.server-urls=http://elasticsearch:9200"
    depends_on:
      - elasticsearch
    ports:
      - 16686:16686 # /api/* endpoints and Jaeger UI at /
      - 16687:16687 # health check
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch

  mongo:
    image: mongo:5.0
    container_name: mongo
    ports:
      - 27017:27017

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - 6379:6379

  postgres:
    image: postgres:15.2-alpine
    environment:
      POSTGRES_PASSWORD: example
      POSTGRES_USER: postgres
      POSTGRES_DB: uber
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
     - 5432:5432

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    container_name: elasticsearch
    ports:
      - 9200:9200
      - 9300:9300
    restart: on-failure
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.0
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jaeger-test-api
    depends_on:
      postgres:
        condition: service_healthy
      jaeger-collector:
        condition: service_started
      jaeger-query:
        condition: service_started
      mongo:
        condition: service_started
    environment:
      - JAEGER_SERVICE_NAME=uber-api
      - JAEGER_URL=jaeger-collector:4318
      - ENVIRONMENT=development
      - MONGO_URL=mongodb://mongo:27017
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - REDIS_URL=redis:6379
      - REDIS_TYPE=single
    ports:
      - 8080:8080